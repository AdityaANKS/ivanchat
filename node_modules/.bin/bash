#!/bin/bash

# Create a script to download a converted toxicity model
cat > setup_perspective_model.py << 'EOF'
import os
import urllib.request
import zipfile
import tensorflow as tf

model_dir = "/mnt/d/ivan/models/toxicity_model"
version_dir = os.path.join(model_dir, "1")
os.makedirs(version_dir, exist_ok=True)

print("Creating a simple toxicity detection model...")

# Create a basic model that can handle text input
model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=[], dtype=tf.string, name='text_input'),
    # Hash the text into integers
    tf.keras.layers.Hashing(num_bins=1000, output_mode='int'),
    # Embed the integers
    tf.keras.layers.Embedding(1000, 16),
    # Global pooling
    tf.keras.layers.GlobalAveragePooling1D(),
    # Classification layers
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(1, activation='sigmoid', name='toxicity_score')
])

# Build the model
model.build()

# Create a serving function
@tf.function
def serve(text):
    return model(text)

# Save the model with proper signatures
signatures = {
    'serving_default': tf.saved_model.signature_def_utils.predict_signature_def(
        inputs={'text': model.input},
        outputs={'toxicity': model.output}
    )
}

# Save model for TensorFlow Serving
tf.saved_model.save(model, version_dir)

print(f"Model saved to {version_dir}")
print("\nModel is ready for TensorFlow Serving!")
EOF

python setup_perspective_model.py